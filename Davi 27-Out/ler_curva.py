# -*- coding: utf-8 -*-
"""ler_curva.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FkK1on-RYewpodf4GXZ55Hb2JFTajPd7

# Leitura da Curva de Carga

Arquivo para realizar a leitura dos dados da curva de carga proveniente do arquivo "curva_carga.xlsx", e calcular as probabilidades de ocorrÃªncia de cada patamar de carga.

### 1 - Realizar leitura do arquivo
"""

import openpyxl

# Load the Excel file
file_path = 'curva de carga.xlsx'  # Replace with the path to your Excel file
workbook = openpyxl.load_workbook(file_path)
sheet = workbook.active

# Initialize 6 empty lists to store the scenarios
sem_inverno = []
fds_inverno = []
sem_verao = []
fds_verao = []
sem_outono = []
fds_outono = []

# Loop through each row (hour)
for row in sheet.iter_rows(min_row=5, max_row=28, values_only=True):
    # Assuming that each row contains 6 scenarios (columns A to F)
    sem_inverno.append(row[1])
    fds_inverno.append(row[2])
    sem_verao.append(row[3])
    fds_verao.append(row[4])
    sem_outono.append(row[5])
    fds_outono.append(row[6])

# Close the Excel file
workbook.close()

print(sem_inverno)
print(fds_inverno)
print(sem_verao)
print(fds_verao)
print(sem_outono)
print(fds_outono)

"""### 2 - Criar dataframe 24 x 365 com os dados da curva de carga"""

import numpy as np


inverno = list(range(0, 8)) + list(range(43, 53))
verao = list(range(17, 30))
outono = list(range(8, 17)) + list(range(30, 43))

curva_anual = np.zeros([24,365])

for i in range(0,365):
    if (np.floor(i/7)) in inverno:
        if i%7 in [5,6]:
            curva_anual[:,i] = fds_inverno
        else:
            curva_anual[:,i] = sem_inverno

    elif (np.floor(i/7)) in verao:
        if i%7 in [5,6]:
            curva_anual[:,i] = fds_verao
        else:
            curva_anual[:,i] = sem_verao

    elif (np.floor(i/7)) in outono:
        if i%7 in [5,6]:
            curva_anual[:,i] = fds_outono
        else:
            curva_anual[:,i] = sem_outono

import pandas as pd

df = pd.DataFrame(curva_anual)
df

"""### 3 - Realizar contagem dos patamares de carga"""

# Calculate the value counts
value_counts = df.stack().value_counts()

# Display the result
print(value_counts)

valores_curva = value_counts.index.to_numpy()
contagem_valores = value_counts.values

print("Valores da curva de carga: ")
print(valores_curva)
print("\nContagem de cada valor: ")
print(contagem_valores)

print(len(valores_curva))

total_horas = np.sum(contagem_valores)
print(total_horas)

"""### 4 - Calcular probabilidades"""

prob_valores = contagem_valores / total_horas
print(prob_valores)

df = pd.DataFrame({'Valor de Carga': valores_curva, 'Probabilidade': prob_valores})

# add index label to df
df.index.name = 'Num.'

# acumular valores da menor probabilidade para a maior (ordem crescente)
prob_acumulada = np.cumsum(prob_valores[::-1])[::-1]
# print(prob_acumulada)

# adicionar coluna de probabilidade acumulada ao dataframe
df['Prob. Acumulada'] = prob_acumulada
df

# plotar curva de probabilidade acumulada, em degraus, em ordem crescente
import matplotlib.pyplot as plt

plt.step(list(range(0, len(valores_curva))), prob_acumulada[::-1])
plt.xlabel('Patamar de Carga')
plt.ylabel('Probabilidade Acumulada')
plt.title('Curva de Probabilidade Acumulada')
plt.grid(True)
plt.show()